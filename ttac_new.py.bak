import configparser
import os
import sys

import loguru

from client_config import ClientConfig

from pyupdater.client import Client

from ttac_ver import Version

case = ''
cur_major = ''
cur_minor = ''
cur_patch = ''
curr_channel = ''


def print_status_info(info):
    total = info.get(u'total')
    downloaded = info.get(u'downloaded')
    status = info.get(u'status')
    percent_complete = info.get(u'percent_complete')
    time = info.get(u'time')
    print(downloaded, total, status, percent_complete, time)
    print("\rProgress: [{0:50s}] {1:.1f}%".format('#' * int(percent_complete * 50), percent_complete), end="", flush=True)


def app_info():
    path = os.environ['LOCALAPPDATA'] + "\\warthunderapps\\thundertac\\update\\config.ini"
    version_int = Version(path).APP_VERSION
    major, minor, patch, channel, release = version_int.split('.')

    case = int(channel)
    if case == 0:
        channel = "alpha"
    elif case == 1:
        channel = "beta"
    elif case == 2:
        channel = "stable"
    else:
        channel = ""

    name = ClientConfig.APP_NAME
    version_string = f"{major}.{minor}.{patch}{channel}"
    return name, version_string, version_int


def _update_(for_client):
    app_name, app_version_string, app_version_int = app_info()

    config_path = os.environ['LOCALAPPDATA'] + "\\warthunderapps\\thundertac\\update\\config.ini"
    config = configparser.ConfigParser()
    config.read(config_path)

    preferred_channel = config['pyupdater']['channel']
    stay_on_channel = config['pyupdater']['strict']

    strict = bool(stay_on_channel)

    if preferred_channel != ("alpha" or "beta" or "stable"):
        preferred_channel = ""

    app_update = for_client.update_check(app_name, app_version_int, channel=preferred_channel, strict=strict)

    if app_update is not None:
        loguru.logger.info(f"[U] PYUPDATER DLI: ThunderTac v{app_version_string} is not the latest version")
        app_update.download()
        if app_update.is_downloaded():
            config_path = os.environ['LOCALAPPDATA'] + "\\warthunderapps\\thundertac\\update\\config.ini"
            if os.path.isfile(config_path):
                config['pyupdater']['version'] = app_version_int
                with open(config_path, 'w') as f:
                    config.write(f)
            app_update.extract_restart()
        # sys.exit(69)

    else:
        loguru.logger.info(f"[U] PYUPDATER DLI: ThunderTac v{app_version_string} is the latest version")


def check_for_update():
    client = Client(ClientConfig())
    client.refresh()
    client.add_progress_hook(print_status_info)

    # try:
    #     pyu_information_latest_alpha_win = client.json_data['latest']['ThunderTac']['alpha']['win']
    #     pyu_information_latest_beta_win = client.json_data['latest']['ThunderTac']['beta']['win']
    #     pyu_information_updates = client.json_data['updates']
    # except KeyError:
    #     pass

    _update_(client)


if __name__ == "__main__":
    # TODO: Manual Update Check & Update
    input("Press any key to exit..")
    sys.exit()

elif __name__ == "ttac_new":
    check_for_update()

